name: Flutter Lint Check

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # Try FVM first, fallback to normal Flutter
      - name: Install Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Check for FVM configuration
        id: check_fvm
        run: |
          if [ -f ".fvmrc" ]; then
            echo "use_fvm=true" >> $GITHUB_OUTPUT
            echo "üìÅ Found .fvmrc file - will use FVM"
          else
            echo "use_fvm=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No .fvmrc file - will use normal Flutter setup"
          fi

      # FVM Setup (if .fvmrc exists)
      - name: Setup Flutter with FVM
        if: steps.check_fvm.outputs.use_fvm == 'true'
        run: |
          dart pub global activate fvm
          fvm install
          fvm use --force
          echo "$(fvm dart --version)"
          echo "$(fvm flutter --version)"

      # Normal Flutter Setup (if no .fvmrc)
      - name: Setup Flutter (normal)
        if: steps.check_fvm.outputs.use_fvm == 'false'
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.24.3'
          cache: true

      # Cache dependencies
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/flutter
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      # Install dependencies
      - name: Install dependencies
        run: |
          if [ "${{ steps.check_fvm.outputs.use_fvm }}" == "true" ]; then
            fvm flutter pub get
          else
            flutter pub get
          fi

      # Run analysis (continue on error for now)
      - name: Run Flutter Analyze
        continue-on-error: true
        run: |
          echo "üîç Running Flutter analyze (non-blocking)"
          if [ "${{ steps.check_fvm.outputs.use_fvm }}" == "true" ]; then
            fvm flutter analyze || echo "‚ö†Ô∏è Analysis found issues - please review above"
          else
            flutter analyze || echo "‚ö†Ô∏è Analysis found issues - please review above"
          fi

      # Check formatting (but don't fail on it, just report)
      - name: Check code formatting
        continue-on-error: true
        run: |
          echo "üìù Checking code formatting"
          if [ "${{ steps.check_fvm.outputs.use_fvm }}" == "true" ]; then
            fvm dart format --set-exit-if-changed . || echo "‚ö†Ô∏è Code formatting issues found. Run 'dart format .' to fix."
          else
            dart format --set-exit-if-changed . || echo "‚ö†Ô∏è Code formatting issues found. Run 'dart format .' to fix."
          fi

      # Optional: Show detailed analysis for information
      - name: Show detailed analysis (informational)
        continue-on-error: true
        run: |
          echo "üìä Detailed analysis report:"
          if [ "${{ steps.check_fvm.outputs.use_fvm }}" == "true" ]; then
            fvm flutter analyze --fatal-infos || echo "Analysis completed with suggestions above."
          else
            flutter analyze --fatal-infos || echo "Analysis completed with suggestions above."
          fi