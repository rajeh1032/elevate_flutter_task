name: Flutter Lint Check

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      # Try FVM first, fallback to normal Flutter
      - name: Install Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Check for FVM configuration
        id: check_fvm
        run: |
          if [ -f ".fvmrc" ]; then
            echo "use_fvm=true" >> $GITHUB_OUTPUT
          else
            echo "use_fvm=false" >> $GITHUB_OUTPUT
          fi

      # FVM Setup (if .fvmrc exists)
      - name: Setup Flutter with FVM
        if: steps.check_fvm.outputs.use_fvm == 'true'
        run: |
          dart pub global activate fvm
          fvm install
          fvm use --force

      # Normal Flutter Setup (if no .fvmrc)
      - name: Setup Flutter (normal)
        if: steps.check_fvm.outputs.use_fvm == 'false'
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.24.3"
          cache: true

      # Cache dependencies
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/flutter
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      # Install dependencies
      - name: Install dependencies
        run: |
          if [ "${{ steps.check_fvm.outputs.use_fvm }}" == "true" ]; then
            fvm flutter pub get
          else
            flutter pub get
          fi

      # Run analysis (non-blocking warnings)
      - name: Run Flutter Analyze
        id: analyze
        run: |
          echo "Running Flutter analyze..."
          ANALYZE_EXIT_CODE=0
          if [ "${{ steps.check_fvm.outputs.use_fvm }}" == "true" ]; then
            fvm flutter analyze || ANALYZE_EXIT_CODE=$?
          else
            flutter analyze || ANALYZE_EXIT_CODE=$?
          fi

          if [ $ANALYZE_EXIT_CODE -ne 0 ]; then
            echo "analyze_warnings=true" >> $GITHUB_OUTPUT
            echo "Warning: Analysis found issues"
          else
            echo "analyze_warnings=false" >> $GITHUB_OUTPUT
            echo "Analysis passed successfully"
          fi

      # Check formatting (blocking)
      - name: Check code formatting
        id: format
        run: |
          echo "Checking code formatting..."
          if [ "${{ steps.check_fvm.outputs.use_fvm }}" == "true" ]; then
            if fvm dart format --output=none --set-exit-if-changed .; then
              echo "format_failed=false" >> $GITHUB_OUTPUT
              echo "Code formatting is correct"
            else
              echo "format_failed=true" >> $GITHUB_OUTPUT
              echo "Code formatting issues found"
              echo "Run 'dart format .' to fix formatting issues"
              exit 1
            fi
          else
            if dart format --output=none --set-exit-if-changed .; then
              echo "format_failed=false" >> $GITHUB_OUTPUT
              echo "Code formatting is correct"
            else
              echo "format_failed=true" >> $GITHUB_OUTPUT
              echo "Code formatting issues found" 
              echo "Run 'dart format .' to fix formatting issues"
              exit 1
            fi
          fi

      # Final Summary (only runs if formatting passed)
      - name: Summary
        if: always()
        run: |
          echo "## Flutter Lint Summary" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.analyze.outputs.analyze_warnings }}" == "true" ]; then
            echo "- Analysis: Found warnings (review recommended)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Analysis: Passed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.format.outputs.format_failed }}" == "true" ]; then
            echo "- Formatting: Failed (must fix)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Formatting: Passed" >> $GITHUB_STEP_SUMMARY
          fi
